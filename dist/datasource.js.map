{"version":3,"sources":["../src/datasource.js"],"names":["_","MongoDBDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","url","name","db","jsonData","mongodb_url","mongodb_db","id","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","doRequest","then","res","forEach","result","results","r","series","push","target","s","datapoints","points","tables","refId","value","variable","multi","includeAll","quotedValues","map","val","join","queryType","replace","scopedVars","interpolateVariable","collection","intervalMs","maxDataPoints","datasourceId","metricFindQuery","status","message","catch","console","log","err","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","getAdhocFilters","adhocFilters","doDirectRequest","method","response","$$status","$$config","config","timeRange","mapToTextValue","table","search","rows","row","i","text","isObject","datasourceRequest","from","valueOf","toString","to","queries","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class MongoDBDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.db = { 'url' : instanceSettings.jsonData.mongodb_url, 'db' : instanceSettings.jsonData.mongodb_db }\n    this.id = instanceSettings.id;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n    query.db = this.db\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest(query)\n    .then(result => {\n      var res= [];\n      _.forEach(result.data.results, r => {\n        _.forEach(r.series, s => {\n          res.push({target: s.name, datapoints: s.points});\n        })\n        _.forEach(r.tables, t => {\n          t.type = 'table';\n          t.refId = r.refId;\n          res.push(t);\n        })\n      })\n\n      result.data = res;\n      return result;\n    });\n  }\n\n  interpolateVariable(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return '\"' + value + '\"';\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    var quotedValues = _.map(value, val => {\n      return '\"' + val + '\"';\n    });\n    return quotedValues.join(',');\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== '[]';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        queryType: 'timeSeriesQuery',\n        target: this.templateSrv.replace(target.target, options.scopedVars, this.interpolateVariable),\n        collection: target.collection,\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n        datasourceId: this.id\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  testDatasource() {\n    return this.metricFindQuery('ping')\n        .then(res => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch(err => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    return this.doDirectRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      response.data.$$status = result.status;\n      response.data.$$config = result.config;\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var options = {\n        range: this.timeSrv.timeRange(),\n        targets: [{\n          queryType: 'metricsQuery',\n          target: query,\n          refId: \"search\",\n          datasourceId: this.id,\n        }]\n      };\n    return this.doRequest(options).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    var table = result.data.results.search.tables[0];\n\n    if (!table) {\n      return [];\n    }\n\n    return _.map(table.rows, (row, i) => {\n      if (row.length > 1) {\n        return { text: row[0], value: row[1] };\n      } else if (_.isObject(row[0])) {\n        return { text: row[0], value: i};\n      }\n      return { text: row[0], value: row[0] };\n    });\n  }\n\n  doDirectRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  doRequest(options) {\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries: options.targets,\n      }\n    });\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}
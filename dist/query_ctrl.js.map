{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","_","MongoDBDatasourceQueryCtrl","$scope","$injector","templateSrv","$q","uiSegmentSrv","scope","target","collection","type","rawQuery","collectionSegment","newSegment","query","datasource","metricFindQuery","then","transformToSegments","catch","handleQueryError","bind","value","panelCtrl","refresh","map","results","segment","text","expandable","err","error","message","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,e,kBAAAA,S;;AACDC,O;;;;;;;;;;;;;;;;;;;;;4CAGMC,0B;;;AAEX,4CAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,WAA/B,EAA4CC,EAA5C,EAAgDC,YAAhD,EAA8D;AAAA;;AAAA,8JACtDJ,MADsD,EAC9CC,SAD8C;;AAG5D,gBAAKI,KAAL,GAAaL,MAAb;AACA,gBAAKM,MAAL,CAAYC,UAAZ,GAAyB,MAAKD,MAAL,CAAYC,UAAZ,IAA0B,YAAnD;AACA,gBAAKD,MAAL,CAAYA,MAAZ,GAAqB,MAAKA,MAAL,CAAYA,MAAZ,IAAsB,IAA3C;AACA,gBAAKA,MAAL,CAAYE,IAAZ,GAAmB,MAAKF,MAAL,CAAYE,IAAZ,IAAoB,WAAvC;AACA,gBAAKF,MAAL,CAAYG,QAAZ,GAAuB,IAAvB;AACA,gBAAKC,iBAAL,GAAyBN,aAAaO,UAAb,CAAwB,MAAKL,MAAL,CAAYC,UAApC,CAAzB;AACA,gBAAKH,YAAL,GAAoBA,YAApB;AAT4D;AAU7D;;;;qCAEUQ,K,EAAO;AAChB,mBAAO,KAAKC,UAAL,CAAgBC,eAAhB,CAAgCF,SAAS,EAAzC,CAAP;AACD;;;2CAEgB;AACf,mBAAO,KAAKC,UAAL,CACJC,eADI,CACY,kBADZ,EAEJC,IAFI,CAEC,KAAKC,mBAAL,CAAyB,EAAzB,CAFD,EAGJC,KAHI,CAGE,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAHF,CAAP;AAIA;AACA;AACA;AACD;;;8CAEmB;AAClB,iBAAKb,MAAL,CAAYC,UAAZ,GAAyB,KAAKG,iBAAL,CAAuBU,KAAhD;AACA,iBAAKC,SAAL,CAAeC,OAAf;AACD;;;6CAEkB;AACjB,iBAAKD,SAAL,CAAeC,OAAf,GADiB,CACS;AAC3B;;;gDAEqB;AAAA;;AACpB,mBAAO,mBAAW;AAChB,qBAAOxB,EAAEyB,GAAF,CAAMC,OAAN,EAAe,mBAAW;AAC/B,uBAAO,OAAKpB,YAAL,CAAkBO,UAAlB,CAA6B;AAClCS,yBAAOK,QAAQC,IADmB;AAElCC,8BAAYF,QAAQE;AAFc,iBAA7B,CAAP;AAID,eALM,CAAP;AAMD,aAPD;AAQD;;;2CAEgBC,G,EAAK;AACpB,iBAAKC,KAAL,GAAaD,IAAIE,OAAJ,IAAe,8BAA5B;AACA,mBAAO,EAAP;AACD;;;;QAnD6CjC,S;;;;AAsDhDE,iCAA2BgC,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport './css/query-editor.css!'\n\nexport class MongoDBDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, templateSrv, $q, uiSegmentSrv) {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.target.collection = this.target.collection || \"collection\"\n    this.target.target = this.target.target || '[]';\n    this.target.type = this.target.type || 'timeserie';\n    this.target.rawQuery = true;\n    this.collectionSegment = uiSegmentSrv.newSegment(this.target.collection)\n    this.uiSegmentSrv = uiSegmentSrv\n  }\n\n  getOptions(query) {\n    return this.datasource.metricFindQuery(query || '');\n  }\n\n  getCollections() {\n    return this.datasource\n      .metricFindQuery(\"list_collections\")\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n    //return Promise.resolve(_.map([\"col1\", \"col2\"], x => {\n    //    return this.uiSegmentSrv.newSegment(x);\n    //}))\n  }\n\n  collectionChanged() {\n    this.target.collection = this.collectionSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  transformToSegments() {\n    return results => {\n      return _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n    }\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n\nMongoDBDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}